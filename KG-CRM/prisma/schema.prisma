// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id Int @id @default(autoincrement())
  caption String
  employers Employer[]
  filials Filial[]
  users User[]
  groups Group[]
  email String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Employer {
  id Int @id @default(autoincrement())
  acccount Account @relation(fields: [accountId], references: [id])
  refreshToken RefreshToken[]
  group Group[] // Сотрудник может иметь множество групп
  accountId Int
  name String
  phone String
  filial Filial @relation(fields: [filialId], references: [id])
  filialId Int
  username String @unique
  password String
  email String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())
  account Account @relation(fields: [accountId], references: [id])
  filial Filial? @relation(fields: [filialId], references: [id])
  groupUsers GroupUser[] //1 юзер может быть в нескольких группах
  accountId Int
  filialId Int?
  fio String
  phone String
  password String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model GroupUser {
  id Int @id @default(autoincrement())
  groupId Int
  userId Int
  user User @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now()) // Тоже самое что и дата присоединения к группе.
  updateAt DateTime @updatedAt
}

model Group {
  id Int @id @default(autoincrement())
  groupUsers GroupUser[]
  caption String
  timestart DateTime
  timefinish DateTime
  type Int
  lang String
  level String
  filialId Int
  accountId Int
  teacherId Int
  teacher Employer @relation(fields: [teacherId], references: [id])
  account Account @relation(fields: [accountId], references: [id])
  filial Filial @relation(fields: [filialId], references: [id])
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Filial {
  id Int @id @default(autoincrement())
  accountId Int
  account Account @relation(fields: [accountId], references: [id])
  address String
  caption String
  employers Employer[]
  users User[]
  groups Group[]
    createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model RefreshToken {
  id Int @id @default(autoincrement())
  token String @unique
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  emplId Int
  employer Employer @relation(fields: [emplId], references: [id])
}
